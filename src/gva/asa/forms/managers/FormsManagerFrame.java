package gva.asa.forms.managers;

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import gva.asa.forms.ssh.SSHConnector;
import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author farnauvi
 */
public class FormsManagerFrame extends javax.swing.JFrame {
    
    private static String USERNAME = "";
    private static final String USERNAME_FORMS11 = "forms11g";
    private static String HOST = "";
    private static final int PORT = 22;
    private static String PASSWORD = "";
    private String FILE = ""; 
    private static final String RUTA_AMBITOS = "/aplicaciones/forms11g/conf/";
    private static String RUTA_FORMSWEB = "/srv_apl/forms11g/middleware/user_projects/domains/dominioForms/config/fmwconfig/servers/WLS_FORMS/applications/formsapp_11.1.2/config/";
    private static String RUTA_TNSNAMES = "/srv_apl/forms11g/middleware/forms_reports/config/";
    private String RUTA_FILE = "";
    private ArrayList<String> FilesEncontrados = new ArrayList<String>();
    private static final String ENTER_KEY = "\n";
    private String CLASSPATH_ENV="";
    private int ERROR=0;
    /**
     * Creates new form FormsManagerFrame
     */
    public FormsManagerFrame() {
        initComponents();
        
    }
    
     
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DistribucionPanel = new javax.swing.JPanel();
        pre_f11_int_rb = new javax.swing.JRadioButton();
        pro_f11_int_rb = new javax.swing.JRadioButton();
        pro_f11_ext_rb = new javax.swing.JRadioButton();
        desa_f11_rb = new javax.swing.JRadioButton();
        pre_f11_ext_rb = new javax.swing.JRadioButton();
        AmbitoPanel = new javax.swing.JPanel();
        filePanel = new javax.swing.JPanel();
        newAmbitoPanel = new javax.swing.JPanel();
        newAmbitoButton = new javax.swing.JButton();
        newAmbitoTF = new javax.swing.JTextField();
        editButtonPanel = new javax.swing.JPanel();
        editFileButton = new javax.swing.JButton();
        EditorPanel = new javax.swing.JPanel();
        DistribuirButton = new javax.swing.JButton();
        editorScrollPanel = new javax.swing.JScrollPane();
        EditorTextArea = new javax.swing.JTextArea();
        guardar = new javax.swing.JButton();
        EntornoPanel = new javax.swing.JPanel();
        EntornosComboBox = new javax.swing.JComboBox<>();
        ConsultaAmbitos = new javax.swing.JButton();
        EntornosLabel = new javax.swing.JLabel();
        UsernameTF = new javax.swing.JTextField();
        UserLabel = new javax.swing.JLabel();
        PassLabel = new javax.swing.JLabel();
        PasswordF = new javax.swing.JPasswordField();
        ServersPanel = new javax.swing.JPanel();
        OutputPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GVA Forms Manager");
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(90, 60));
        setPreferredSize(new java.awt.Dimension(1400, 900));

        DistribucionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Panel de Distribución"));

        pre_f11_int_rb.setText("Pre_Forms_11_Interno");
        pre_f11_int_rb.setToolTipText("");

        pro_f11_int_rb.setText("Pro_Forms_11_Interno");
        pro_f11_int_rb.setToolTipText("");
        pro_f11_int_rb.setEnabled(false);

        pro_f11_ext_rb.setText("Pro_Forms_11_Externo");
        pro_f11_ext_rb.setEnabled(false);

        desa_f11_rb.setText("Desarrollo_Forms_11");

        pre_f11_ext_rb.setText("Pre_Forms_11_Externo");
        pre_f11_ext_rb.setToolTipText("");

        javax.swing.GroupLayout DistribucionPanelLayout = new javax.swing.GroupLayout(DistribucionPanel);
        DistribucionPanel.setLayout(DistribucionPanelLayout);
        DistribucionPanelLayout.setHorizontalGroup(
            DistribucionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DistribucionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DistribucionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desa_f11_rb)
                    .addComponent(pre_f11_int_rb)
                    .addComponent(pre_f11_ext_rb)
                    .addComponent(pro_f11_int_rb)
                    .addComponent(pro_f11_ext_rb))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DistribucionPanelLayout.setVerticalGroup(
            DistribucionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DistribucionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desa_f11_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pre_f11_int_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pre_f11_ext_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pro_f11_int_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pro_f11_ext_rb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AmbitoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ámbitos"));
        AmbitoPanel.setToolTipText("Selección");

        filePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        filePanel.setLayout(new javax.swing.BoxLayout(filePanel, javax.swing.BoxLayout.LINE_AXIS));

        newAmbitoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        newAmbitoPanel.setLayout(new javax.swing.BoxLayout(newAmbitoPanel, javax.swing.BoxLayout.X_AXIS));

        newAmbitoButton.setText("Crear nuevo ámbito:");
        newAmbitoButton.setEnabled(false);
        newAmbitoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAmbitoButtonActionPerformed(evt);
            }
        });
        newAmbitoPanel.add(newAmbitoButton);

        newAmbitoTF.setToolTipText("");
        newAmbitoPanel.add(newAmbitoTF);

        editFileButton.setText("Editar ámbito/fichero");
        editFileButton.setEnabled(false);
        editFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editButtonPanelLayout = new javax.swing.GroupLayout(editButtonPanel);
        editButtonPanel.setLayout(editButtonPanelLayout);
        editButtonPanelLayout.setHorizontalGroup(
            editButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editButtonPanelLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(editFileButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editButtonPanelLayout.setVerticalGroup(
            editButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editFileButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout AmbitoPanelLayout = new javax.swing.GroupLayout(AmbitoPanel);
        AmbitoPanel.setLayout(AmbitoPanelLayout);
        AmbitoPanelLayout.setHorizontalGroup(
            AmbitoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AmbitoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AmbitoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newAmbitoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(editButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        AmbitoPanelLayout.setVerticalGroup(
            AmbitoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AmbitoPanelLayout.createSequentialGroup()
                .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newAmbitoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        EditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));

        DistribuirButton.setText("Distribuir");
        DistribuirButton.setToolTipText("");
        DistribuirButton.setEnabled(false);
        DistribuirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DistribuirButtonActionPerformed(evt);
            }
        });

        EditorTextArea.setColumns(20);
        EditorTextArea.setRows(5);
        editorScrollPanel.setViewportView(EditorTextArea);

        guardar.setText("Guardar en el Servidor Seleccionado");
        guardar.setEnabled(false);
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditorPanelLayout = new javax.swing.GroupLayout(EditorPanel);
        EditorPanel.setLayout(EditorPanelLayout);
        EditorPanelLayout.setHorizontalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addGap(0, 27, Short.MAX_VALUE)
                        .addComponent(guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DistribuirButton))
                    .addComponent(editorScrollPanel))
                .addContainerGap())
        );
        EditorPanelLayout.setVerticalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorScrollPanel)
                .addGap(18, 18, 18)
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DistribuirButton)
                    .addComponent(guardar))
                .addContainerGap())
        );

        EntornoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Entorno"));

        EntornosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desarrollo_Forms_11", "Pre_Forms_11_Interno", "Pre_Forms_11_Externo", "Pro_Forms_11_Interno", "Pro_Forms_11_Externo" }));
        EntornosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntornosComboBoxActionPerformed(evt);
            }
        });

        ConsultaAmbitos.setText("Consultar");
        ConsultaAmbitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultaAmbitosActionPerformed(evt);
            }
        });

        EntornosLabel.setText("Seleccione entorno:");

        UsernameTF.setToolTipText("");

        UserLabel.setText("Usuario:");

        PassLabel.setText("Pass:");

        PasswordF.setToolTipText("");

        ServersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Servidores"));
        ServersPanel.setLayout(new javax.swing.BoxLayout(ServersPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout EntornoPanelLayout = new javax.swing.GroupLayout(EntornoPanel);
        EntornoPanel.setLayout(EntornoPanelLayout);
        EntornoPanelLayout.setHorizontalGroup(
            EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntornoPanelLayout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ConsultaAmbitos)
                    .addGroup(EntornoPanelLayout.createSequentialGroup()
                        .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PassLabel)
                            .addComponent(EntornosLabel)
                            .addComponent(UserLabel))
                        .addGap(23, 23, 23)
                        .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(UsernameTF)
                            .addComponent(EntornosComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PasswordF))))
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EntornoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ServersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        EntornoPanelLayout.setVerticalGroup(
            EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntornoPanelLayout.createSequentialGroup()
                .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EntornosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EntornosLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EntornoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PassLabel)
                    .addComponent(PasswordF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConsultaAmbitos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ServersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        OutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Registro - Log"));

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        javax.swing.GroupLayout OutputPanelLayout = new javax.swing.GroupLayout(OutputPanel);
        OutputPanel.setLayout(OutputPanelLayout);
        OutputPanelLayout.setHorizontalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        OutputPanelLayout.setVerticalGroup(
            OutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OutputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EntornoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AmbitoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(OutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(DistribucionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(EditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(EntornoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EditorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AmbitoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DistribucionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EntornosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntornosComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EntornosComboBoxActionPerformed

    private void ConsultaAmbitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultaAmbitosActionPerformed
        try {
            ServersPanel.removeAll();
            repaint();
            newAmbitoTF.setText("");
            guardar.setEnabled(false);
            newAmbitoButton.setEnabled(true);
            EditorTextArea.setText("");
            String entornoSeleccionado = EntornosComboBox.getSelectedItem().toString();
            System.out.println(entornoSeleccionado);
            String separador = Pattern.quote(",");
            String[] servers = java.util.ResourceBundle.getBundle("gva/asa/forms/resources/Bundle").getString(entornoSeleccionado).split(separador);
            HOST = servers[0];
            ServersPanel.removeAll();
            logTextArea.setText("");
            USERNAME = UsernameTF.getText();
            PASSWORD = PasswordF.getText();
            SSHConnector sshConnector = new SSHConnector();
            sshConnector.connect(USERNAME, PASSWORD, HOST, PORT);
            String result = sshConnector.executeCommand("ls "+RUTA_AMBITOS+"*.env");
            sshConnector.disconnect();
            filesEncontrados(result);
            filePanel.removeAll();
            JPanel jpan = new JPanel();
            jpan.setLayout(new BoxLayout(jpan, BoxLayout.Y_AXIS));
            ButtonGroup buttonFiles = new ButtonGroup();
            
            // FORMSWEB //
            
            JRadioButton a = new JRadioButton("formsweb.cfg");
            a.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        String a = evt.getActionCommand();
                        RUTA_FILE = RUTA_FORMSWEB;
                        FILE = "formsweb.cfg";
                    }
                    });
            buttonFiles.add(a);
            jpan.add(a);
            a.setVisible(true);
            jpan.add(new JSeparator(SwingConstants.HORIZONTAL));   
            
              // TNSNAMES //
            
            JRadioButton c = new JRadioButton("tnsnames.ora");
            c.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        String c = evt.getActionCommand();
                        RUTA_FILE = RUTA_TNSNAMES;
                        FILE = "tnsnames.ora";
                    }
                    });
            buttonFiles.add(c);
            jpan.add(c);
            c.setVisible(true);
            jpan.add(new JSeparator(SwingConstants.HORIZONTAL));   
            
            // AMBITOS //
            int i=0;
            for (String file: FilesEncontrados ) {
                i++;
                JRadioButton b = new JRadioButton(file);
                b.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        String a = evt.getActionCommand();
                        RUTA_FILE = RUTA_AMBITOS;
                        FILE = a;
                    }
                    });
                buttonFiles.add(b);
                jpan.add(b);
                b.setVisible(true);
            }
            
            jpan.add(new JSeparator(SwingConstants.HORIZONTAL));
          
                     
            JLabel Servidores = new JLabel("-  Servidores  del entorno  -");
            ServersPanel.add(Servidores);
            i=0;
            for (String server: servers) {
                JLabel lserver = new JLabel("     "+server);
                if (i==0) lserver.setForeground(Color.BLUE);
                ServersPanel.add(lserver);
                i++;
            }
            filePanel.add(jpan);
           
            pack();
            DistribuirButton.setEnabled(false);
            editFileButton.setEnabled(true);
        } catch (JSchException | IllegalAccessException | IOException ex) {
            escribeLog(ex.getMessage());
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_ConsultaAmbitosActionPerformed
    
    
    
    private void DistribuirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DistribuirButtonActionPerformed
   
            int response = JOptionPane.showConfirmDialog(this, "Está Seguro de distribuir el fichero "+FILE+" a los entornos seleccionados?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        switch (response) {
            case JOptionPane.YES_OPTION:
                distribuyeCambios();
                break;
            case JOptionPane.CLOSED_OPTION:
                System.out.println("JOptionPane closed");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_DistribuirButtonActionPerformed
    
    private void distribuyeCambios() {
        if (pre_f11_int_rb.isSelected()) {
            String[] servers = java.util.ResourceBundle.getBundle("gva/asa/forms/resources/Bundle").getString(pre_f11_int_rb.getText()).split(",");
            for (String server: servers) {
              distribuyeFile(server);  
              System.out.println(server);
            }
        }
        if (pre_f11_ext_rb.isSelected()) {
            String[] servers = java.util.ResourceBundle.getBundle("gva/asa/forms/resources/Bundle").getString(pre_f11_ext_rb.getText()).split(",");
            for (String server: servers) {
              distribuyeFile(server);  
              System.out.println(server);
            }
        }
        if (desa_f11_rb.isSelected()) {
            String[] servers = java.util.ResourceBundle.getBundle("gva/asa/forms/resources/Bundle").getString(desa_f11_rb.getText()).split(",");
            for (String server: servers) {
              distribuyeFile(server);  
              System.out.println(server);
            }
        }
    }
    
    private void distribuyeFile(String server) {
        HOST=server;
        guardar();
    }
    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        guardar();
    }//GEN-LAST:event_guardarActionPerformed

    private void newAmbitoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAmbitoButtonActionPerformed
        creaAmbito();
    }//GEN-LAST:event_newAmbitoButtonActionPerformed

    private void editFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFileButtonActionPerformed
        EditorTextArea.setText("");
        logTextArea.setText("");
        abreFichero(RUTA_FILE+FILE);
        DistribuirButton.setEnabled(false);
        System.out.println(RUTA_FILE+FILE);
    }//GEN-LAST:event_editFileButtonActionPerformed
    
    private void creaAmbito() {
        FILE=newAmbitoTF.getText();
        ERROR=0;
        escribeLog("Server:"+HOST+" Subiendo nuevo fichero:"+FILE+ENTER_KEY);
        subeFichero();
        escribeLog("Server:"+HOST+" Aplicando permisos Forms:"+FILE+ENTER_KEY);
        cambiaPropietarioForms();
        escribeLog("Server:"+HOST+" Grabando fichero en destino:"+FILE+ENTER_KEY);
        grabaFicheroForms(RUTA_AMBITOS+FILE);
        escribeLog("Comprobando ficheros del ClassPath. Los siguientes ficheros no están:"+ENTER_KEY);
        borraTemporalUser();
        CompruebaLibrerias();
        if (ERROR==0) {
            escribeLog("Server:"+HOST+" Guardado OK"+ENTER_KEY);
            DistribuirButton.setEnabled(true);
        }     
    }
    
    private void guardar() {
        ERROR=0;
        escribeLog("Server:"+HOST+" Haciendo copia de fichero:"+FILE+ENTER_KEY);
        backupFicheroForms(RUTA_FILE+FILE);
        escribeLog("Server:"+HOST+" Subiendo fichero con cambios:"+FILE+ENTER_KEY);
        subeFichero();
        escribeLog("Server:"+HOST+" Aplicando permisos Forms:"+FILE+ENTER_KEY);
        cambiaPropietarioForms();
        escribeLog("Server:"+HOST+" Grabando fichero en destino:"+FILE+ENTER_KEY);
        grabaFicheroForms(RUTA_FILE+FILE);
        escribeLog("Comprobando ficheros del ClassPath. Los siguientes ficheros no están:"+ENTER_KEY);
        borraTemporalUser();
        CompruebaLibrerias();
        if (ERROR==0) {
            escribeLog("Server:"+HOST+" Guardado OK"+ENTER_KEY);
            DistribuirButton.setEnabled(true);
        }
    
    }
        
    private void escribeLog(String text) {
        if ((!(text.equals(PASSWORD+ENTER_KEY)))&&(!(text.startsWith("bash:")))&&(!(text.contains("sudo")))) {
            logTextArea.append(text);
            System.out.println(text);
        }
    }
    
    private void abreFichero (String remoteFile) {
//        escribeLog("Haciendo copia temporal de fichero:"+FILE+ENTER_KEY);
        guardar.setEnabled(true);
        CLASSPATH_ENV="";
        preCopiaFichero(remoteFile);
        cambiaPropietarioDownload();
        escribeLog("Abriendo fichero:"+FILE+ENTER_KEY);
        cogeFichero("/tmp/"+FILE);
        borraTemporal();
        
    }
    
    private void preCopiaFichero (String remoteFile) {
        String command="cp "+remoteFile+ " /tmp/"+FILE;
        runAsUsername(command, USERNAME_FORMS11); 
    }
    
    private void cambiaPropietarioDownload() {
        String command="chmod 777 /tmp/"+FILE;
        runAsUsername(command,USERNAME_FORMS11);
    }
    
    private void borraTemporal() {
        String command="rm -rf /tmp/"+FILE;
        runAsUsername(command,USERNAME_FORMS11);
    }
    
    private void compruebaFichero (String libreria) {
        String command="[ -f "+libreria+" ] || echo "+libreria;
        runAsUsername(command,USERNAME_FORMS11);
    }
    
      
    private void CompruebaLibrerias () {
        String command="for class in `echo \""+CLASSPATH_ENV+"\" | sed -e \"s/:/ /g\"`; do [ -f $class ] || echo \"$class no existe\" ; done";
        System.out.println(command);
        runAsUsername(command,USERNAME_FORMS11);
    }
    
    private void filesEncontrados (String sTexto) {
            FilesEncontrados = new ArrayList<>();
	    // Ruta conocida
	    String sTextoBuscado = RUTA_AMBITOS;

	    while (sTexto.indexOf(sTextoBuscado) > -1) {
	      sTexto = sTexto.substring(sTexto.indexOf(sTextoBuscado)+sTextoBuscado.length(),sTexto.length());
              String fichero = sTexto.substring(0,sTexto.indexOf("\n\r"));
              FilesEncontrados.add(fichero);
            }    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormsManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormsManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormsManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormsManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormsManagerFrame().setVisible(true);
            }
        });
    }
    
    
    private void backupFicheroForms (String remoteFile) {
        String command="cp "+remoteFile+ " "+RUTA_AMBITOS+"backup/";
        runAsUsername(command,USERNAME_FORMS11); 
    }
    
    private void cambiaPropietarioForms() {
        String command="sudo chown forms11g:forms11g /tmp/"+FILE;
        runAsUsername(command,USERNAME);
    }
    
    private void grabaFicheroForms(String remoteFile) {
        String command="cp /tmp/"+FILE+" "+remoteFile;
        runAsUsername(command,USERNAME_FORMS11);
    }
    
    private void borraTemporalUser() {
        String command="rm -rf /tmp/"+FILE;
        runAsUsername(command,USERNAME);
    }
      
    private void runAsUsername (String command, String useras) {
        try
            {
                JSch jsch = new JSch();
                Session session = jsch.getSession(USERNAME, HOST, PORT);
                session.setPassword(PASSWORD);
                session.setConfig("StrictHostKeyChecking", "no");
                System.out.println("Establishing Connection...");
                session.connect();
                System.out.println("Connection established with USER."+USERNAME);
                // Abrimos un canal SSH. Es como abrir una consola.
                ChannelExec channelExec = (ChannelExec) session.
                    openChannel("exec");
                InputStream in = channelExec.getInputStream();
                OutputStream out=channelExec.getOutputStream();
                // Ejecutamos el comando para ser forms11g.
                ((ChannelExec) channelExec).setPty(true);
                ((ChannelExec)channelExec).setCommand("sudo su - "+useras+" -c '"+command+"'");
                channelExec.connect();
                out.write((PASSWORD+"\n").getBytes());
                out.flush();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                StringBuilder builder = new StringBuilder();
                String linea;
                while ((linea = reader.readLine()) != null) {
                    builder.append(linea);
                    builder.append(ENTER_KEY);
                    escribeLog(linea+ENTER_KEY);
                }
                // Cerramos el canal SSH.
            channelExec.disconnect();
            System.out.println("Connection closed with USER."+USERNAME);
         }
        catch(JSchException | IOException ex)
        {
            System.out.println(ex);
            escribeLog(ex.getMessage()+":"+ex);
            ERROR++;
        }
        
    }
    
    private void cogeFichero(String remoteFile) {
         try
            {
                JSch jsch = new JSch();
                Session session = jsch.getSession(USERNAME, HOST, PORT);
                session.setPassword(PASSWORD);
                session.setConfig("StrictHostKeyChecking", "no");
                System.out.println("Establishing Connection...");
                session.connect();
                System.out.println("Connection established.");
                System.out.println("Creating SFTP Channel.");
                ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
                sftpChannel.connect();
                System.out.println("SFTP Channel created.");
                InputStream out= null;
                out= sftpChannel.get(remoteFile);
                BufferedReader br = new BufferedReader(new InputStreamReader(out));
                String line;
                while ((line = br.readLine()) != null) 
                {
                    System.out.println(line);
                    EditorTextArea.append(line+ENTER_KEY);
                }
                br.close();
                sftpChannel.disconnect();
                session.disconnect();
            }
            catch(JSchException | SftpException | IOException e)
            {
                System.out.println(e);
                escribeLog(e.getMessage());   
                ERROR++;
            }
    }
    
    private void subeFichero() {             
         try
            {
                InputStream in= new ByteArrayInputStream(EditorTextArea.getText().getBytes());
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                String line;
                while ((line = reader.readLine()) != null) 
                {
                    if (line.startsWith("CLASSPATH=")) {CLASSPATH_ENV=line.substring(10);}
                }       
                JSch jsch = new JSch();
                Session session = jsch.getSession(USERNAME, HOST, PORT);
                session.setPassword(PASSWORD);
                session.setConfig("StrictHostKeyChecking", "no");
                System.out.println("Establishing Connection...");
                session.connect();
                System.out.println("Connection established with USER."+USERNAME);
                System.out.println("Creating SFTP Channel.");
                ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
                System.out.println("Ususario sftp:"+session.getUserName());
                sftpChannel.connect();
                System.out.println("SFTP Channel created.");
                in= new ByteArrayInputStream(EditorTextArea.getText().getBytes());
                sftpChannel.cd("/tmp");
                sftpChannel.put(in,FILE);
                sftpChannel.chmod(509, "/tmp/"+FILE);
                sftpChannel.disconnect();
                session.disconnect();  
            }
            catch(JSchException | SftpException | IOException ex)
            {
                System.out.println(ex);
                escribeLog(ex.getMessage()+":"+ex);
                ERROR++;
            }
    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AmbitoPanel;
    private javax.swing.JButton ConsultaAmbitos;
    private javax.swing.JPanel DistribucionPanel;
    private javax.swing.JButton DistribuirButton;
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JTextArea EditorTextArea;
    private javax.swing.JPanel EntornoPanel;
    private javax.swing.JComboBox<String> EntornosComboBox;
    private javax.swing.JLabel EntornosLabel;
    private javax.swing.JPanel OutputPanel;
    private javax.swing.JLabel PassLabel;
    private javax.swing.JPasswordField PasswordF;
    private javax.swing.JPanel ServersPanel;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JTextField UsernameTF;
    private javax.swing.JRadioButton desa_f11_rb;
    private javax.swing.JPanel editButtonPanel;
    private javax.swing.JButton editFileButton;
    private javax.swing.JScrollPane editorScrollPanel;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton guardar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton newAmbitoButton;
    private javax.swing.JPanel newAmbitoPanel;
    private javax.swing.JTextField newAmbitoTF;
    private javax.swing.JRadioButton pre_f11_ext_rb;
    private javax.swing.JRadioButton pre_f11_int_rb;
    private javax.swing.JRadioButton pro_f11_ext_rb;
    private javax.swing.JRadioButton pro_f11_int_rb;
    // End of variables declaration//GEN-END:variables
}
